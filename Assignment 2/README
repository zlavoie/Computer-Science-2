
CS 104
Computer Science II


Assignment 2
Due Thursday Feb 8, 2018
 

        
1.   Design a class that models a 24 - hour Clock class. The class should include variables: 
 hours, minutes.

This is a 24-hour clock so that 13:15  is 1:15:PM.
 
There should be three constructors:
a default constructor  that sets the time to midnight hour = 0, minute = 0
a one-argument constructor with parameter for the hour   This constructor always sets the minute to 0.
a two-argument constructor with parameters for the hour and minute
Methods should be
    int getHour();
    //returns the hour
    int getMinute();
    //returns the minute
    String toString()
    //returns a String in the form x:xx PM eg. "2:53 PM" 0r "12:15 AM"
    void incrementTimer();
    //basic incrementer adds 1 minute to the time
    void incrementTimer(int x);
    //overloaded method ; adds x minutes to the time
    void SetTime(int h, int m);
    // Sets the time.   
   // All values must all be  range-checked to make sure they are valid.
   // For example, 3:78  is invalid.
   // If invalid data is entered a message should be issued and the program terminates.
Notes:
1. Youâ€™ll have to pay careful attention to the wraparound feature. For instance, if you add 1000 minutes to 15:24  the new time is  8:04.
2. Write a second class (DemoTimer)  that uses your Timer class
The main method of DemoTimer should
instantiate a timer (time) with initial time 23:54  
print the current time (as 11:54 PM)
add one minute to the time
print the new time ( as 11:55 PM)
add 190 minutes to the current time
print the new time
prompt for a new time ( hour and minute)
set time to the new time
print the new time
 
Output: (Program prompts are in red, User input is blue)
Current time is 11:54 PM  (Initial time)
Current time is 11:55 PM   (After one minute)

Current time is 3:05 AM    (After 190 minutes)
Enter hour: 15
Enter minute: 23
Current time is 3:23 PM
Note: Data is entered using the 24 hour model. 


You need to save each class in a separate file: Timer.java and DemoTimer.java

 
2.  Write an application that allows two players to play the game of  Nim.  The game board for Nim consists of any number of piles of sticks, ( or pencils,  matches, stones, or coins).  And, each pile contains an arbitrary number of sticks.  Players take turns removing sticks from a single pile.  A player can remove any number of sticks at his/her turn, but only from one pile.  The player to remove the last stick wins the game.  

Note:  There is also a version of Nim in which the player who takes the last stick loses.  An online app of this second version is here. 
 

Nim App

The application should ask each player to enter his/her name and then play the game.
The first player  begins the game.

When a game is over, the application should display a message stating which player won, and ask the players if they would like to play again.  
Note:  Allow only legal moves.  That is, a player must remove at least one stick and may not remove more sticks than are presently in a pile. 
 
Here is how playing the  game should look:

 
To implement the application use two classes:
                    Game and PlayGame
The Game class models the gameboard.
The Game class should have two private variables
            int num Piles;    // number of piles
            int [] piles      // an array holding the number of sticks in each pile
A default constructor should initialize
            numPiles to 3 and put 10 sticks in each pile.
A two-argument constructor should have parameters that supply the number of piles and an array with the number of  sticks in each pile:
            public Game( int num, int[] sticks)
            {
            }
There should be public methods
         public void remove(int pile, int numSticks) // pile is pile number, numSticks is how many to remove
         public boolean gameOver()
         public void printPiles() // prints the pile number and the number of sticks currently in a pile.
 
The PlayGame class has private data
       String player1, player2;      // names of the players
       int turn;                            // whose turn player 1 or player 2, initially 1
       Game game;                       // a Game object (actually a reference to a Game object)
       Scanner input;
The only constructor is the default constructor, which should
ask each player his/her name
set turn to 1
Ask how many piles in the game ( num piles)
Ask how many stick per pile  and build an array int piles[]
Instantiate a new Game object with the number of piles and the array of sticks
             game = new Game(numPiles, piles)
You should also have a method
        public void play() that plays the game until no sticks remain.  Remember to switch turn back and forth between 1 and 2.

The main method is very simple
1. instantiate a PlayGame object:
                     PlayGame game = new PlayGame()
2. play the game : 
                     game.play()
Include a loop that asks if the player wants to play again or not.
These classes should be in two files: Game.java and PlayGame.java

        
